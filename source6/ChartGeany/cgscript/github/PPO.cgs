/*
    CGScript example of Percentage Price Oscillator
    
    https://chart-geany.sourceforge.io/
 */
 
Property MODID[] = "674f57f3";  /* Do not change this line */
Property MODAUTHOR[] = "chartgeany@gmail.com"; /* Enter your name and email here */
Property MODVERSION[] = "1.0.0"; /* Enter module's version here */
Property MODTYPE[] = "CHART OBJECT"; /* Enter module's type here */

/*
MACD Line: (12-day EMA - 26-day EMA)

Signal Line: 9-day EMA of MACD Line

MACD Histogram: MACD Line - Signal Line
*/

static int paramema1 = 12, paramema2 = 26, paramsignal = 9, dim, maxbars, paramthick = 1;
static Color_t ppocolor = COLOR_CYAN, signalcolor = COLOR_YELLOW, histcolor = 0xff5500;
static ObjectHandler_t ppocurve , signalcurve, ppohist, hline;

static void 
Event()
{
  if(LastEvent == EV_INPUT_VAR)
  {
    SetColor(ppocurve, ppocolor);
    SetColor(signalcurve, signalcolor);
    SetColor(ppohist, histcolor);
    SetThickness(ppohist, paramthick);
  }	

  return;
}

static int
Init()
{
  SetObjectType(SUBCHART_OBJECT); /* Declare your object type here */
  
  InputIntegerVariable("Line EMA 1:",  paramema1, 2, 30, &paramema1, true);
  InputIntegerVariable("Line EMA 2:",  paramema2, 3, 31, &paramema2, true);
  InputIntegerVariable("Signal:", paramsignal, 2, 20, &paramsignal, true); 
  InputColorVariable("PPO color:", ppocolor, &ppocolor, false); 
  InputColorVariable("Signal color:", signalcolor, &signalcolor, false);  
  InputColorVariable("Histogram color:", histcolor, &histcolor, false);     	
  InputIntegerVariable("Histogram thickness:", paramthick, 1, 4, &paramthick, false); 
  SetSubChartRange(DBL_MIN, DBL_MAX);
 
  return CGSERR_OK;	
}

static void
Calculate()
{
  double value;
  
  Array_t ema1 = fEMA(TF_CURRENT, paramema1, CLOSE_PRICE);    /* this is a hidden malloc() */
  Array_t ema2 = fEMA(TF_CURRENT, paramema2, CLOSE_PRICE);   /* same as above */
  
  maxbars = NBars(TF_DAY) + 1;
  
  Array_t ppo = ArrayCreate(sizeof(double), maxbars); 
  Array_t signal = ArrayCreate(sizeof(double), maxbars); 
  Array_t hist = ArrayCreate(sizeof(double), maxbars);
  
  for(int counter =0; counter < maxbars; counter++)
  {
    double d = 0;
    cArrayAppend(ppo, d);
    cArrayAppend(signal, d);
    cArrayAppend(hist, d);
  }
  
  dim = ArraySize(ema1) < ArraySize(ema2) ? ArraySize(ema1) : ArraySize(ema2);
  for(int counter=0;counter<dim;counter++)
  {
    value = ((dArrayGet(ema1,counter) - dArrayGet(ema2,counter)) / dArrayGet(ema2,counter) ) * 100;
    cArrayPut(ppo,counter,value);
  }  
  
  signal = gEMA(paramsignal, ppo); /* another hidden malloc () */
  dim = ArraySize(ppo) < ArraySize(signal) ? ArraySize(ppo) : ArraySize(signal);
  for(int counter=0;counter<dim;counter++)
  {
    value = dArrayGet(ppo,counter) - dArrayGet(signal,counter);
    cArrayPut(hist,counter,value);
  }
  
  for(int counter = dim - 1; counter >= 0; counter --)
  {
     ValueSet(ppocurve, dArrayGet(ppo, counter), counter);
     ValueSet(signalcurve, dArrayGet(signal, counter), counter);
     ValueSet(ppohist, dArrayGet(hist, counter), counter);
  }
  
  /* As long as we declare the local arrays non-static, CGScript 1.4 will destroy them when
     they go out of scope */
}

static int
Loop()
{
  static int lastema1, lastema2, lastsignal, nbrs;
  static unsigned int lastTF = UINT_MAX; 
  
  if(!NeedsUpdate())
    return CGSERR_OK;	
  
  if(FirstRun)
  {
    ppocurve = AddCurve();
    SetColor(ppocurve, ppocolor);
    signalcurve = AddCurve();
    SetColor(signalcurve, signalcolor);
    ppohist = AddVerticalBars();
    SetThickness(ppohist, paramthick);
    SetColor(ppohist, histcolor);
    hline = AddHorizontalLine();
    SetColor(hline, ChartForeColor());
    SetLevel(hline, 0);
  }
  
  if (lastema1 != paramema1 || 
      lastema2 != paramema2 ||
      lastsignal != paramsignal ||
      lastTF != TF_CURRENT ||
      nbrs != NBars(TF_CURRENT))
  {    
    Calculate();

    lastema1 = paramema1;
    lastema2 = paramema2;
    lastsignal = paramsignal;
    lastTF = TF_CURRENT;
    nbrs = NBars(TF_CURRENT);
  }	
    
  return CGSERR_OK;	
}  